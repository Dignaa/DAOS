/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as IndexImport } from './routes/index';

// Create Virtual Routes

const UsersIndexLazyImport = createFileRoute('/users/')();
const ProfileIndexLazyImport = createFileRoute('/profile/')();
const PostsIndexLazyImport = createFileRoute('/posts/')();
const UsersUserIdLazyImport = createFileRoute('/users/$userId')();
const PostsPostIdLazyImport = createFileRoute('/posts/$postId')();
const GroupsGroupIdLazyImport = createFileRoute('/groups/$groupId')();
const signSignupLazyImport = createFileRoute('/(sign)/signup')();
const signSigninLazyImport = createFileRoute('/(sign)/signin')();
const ProfileEditIndexLazyImport = createFileRoute('/profile/edit/')();
const PostsCreateIndexLazyImport = createFileRoute('/posts/create/')();
const GroupsCreateIndexLazyImport = createFileRoute('/groups/create/')();
const PostsEditPostIdLazyImport = createFileRoute('/posts/edit/$postId')();
const GroupsEditGroupIdLazyImport = createFileRoute('/groups/edit/$groupId')();

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const UsersIndexLazyRoute = UsersIndexLazyImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/users/index.lazy').then(d => d.Route));

const ProfileIndexLazyRoute = ProfileIndexLazyImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile/index.lazy').then(d => d.Route));

const PostsIndexLazyRoute = PostsIndexLazyImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/posts/index.lazy').then(d => d.Route));

const UsersUserIdLazyRoute = UsersUserIdLazyImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/users/$userId.lazy').then(d => d.Route));

const PostsPostIdLazyRoute = PostsPostIdLazyImport.update({
  id: '/posts/$postId',
  path: '/posts/$postId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/posts/$postId.lazy').then(d => d.Route));

const GroupsGroupIdLazyRoute = GroupsGroupIdLazyImport.update({
  id: '/groups/$groupId',
  path: '/groups/$groupId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/groups/$groupId.lazy').then(d => d.Route)
);

const signSignupLazyRoute = signSignupLazyImport
  .update({
    id: '/(sign)/signup',
    path: '/signup',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(sign)/signup.lazy').then(d => d.Route));

const signSigninLazyRoute = signSigninLazyImport
  .update({
    id: '/(sign)/signin',
    path: '/signin',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(sign)/signin.lazy').then(d => d.Route));

const ProfileEditIndexLazyRoute = ProfileEditIndexLazyImport.update({
  id: '/profile/edit/',
  path: '/profile/edit/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/profile/edit/index.lazy').then(d => d.Route)
);

const PostsCreateIndexLazyRoute = PostsCreateIndexLazyImport.update({
  id: '/posts/create/',
  path: '/posts/create/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/posts/create/index.lazy').then(d => d.Route)
);

const GroupsCreateIndexLazyRoute = GroupsCreateIndexLazyImport.update({
  id: '/groups/create/',
  path: '/groups/create/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/groups/create/index.lazy').then(d => d.Route)
);

const PostsEditPostIdLazyRoute = PostsEditPostIdLazyImport.update({
  id: '/posts/edit/$postId',
  path: '/posts/edit/$postId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/posts/edit/$postId.lazy').then(d => d.Route)
);

const GroupsEditGroupIdLazyRoute = GroupsEditGroupIdLazyImport.update({
  id: '/groups/edit/$groupId',
  path: '/groups/edit/$groupId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/groups/edit/$groupId.lazy').then(d => d.Route)
);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/(sign)/signin': {
      id: '/(sign)/signin';
      path: '/signin';
      fullPath: '/signin';
      preLoaderRoute: typeof signSigninLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/(sign)/signup': {
      id: '/(sign)/signup';
      path: '/signup';
      fullPath: '/signup';
      preLoaderRoute: typeof signSignupLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/groups/$groupId': {
      id: '/groups/$groupId';
      path: '/groups/$groupId';
      fullPath: '/groups/$groupId';
      preLoaderRoute: typeof GroupsGroupIdLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/posts/$postId': {
      id: '/posts/$postId';
      path: '/posts/$postId';
      fullPath: '/posts/$postId';
      preLoaderRoute: typeof PostsPostIdLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/users/$userId': {
      id: '/users/$userId';
      path: '/users/$userId';
      fullPath: '/users/$userId';
      preLoaderRoute: typeof UsersUserIdLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/posts/': {
      id: '/posts/';
      path: '/posts';
      fullPath: '/posts';
      preLoaderRoute: typeof PostsIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/profile/': {
      id: '/profile/';
      path: '/profile';
      fullPath: '/profile';
      preLoaderRoute: typeof ProfileIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/users/': {
      id: '/users/';
      path: '/users';
      fullPath: '/users';
      preLoaderRoute: typeof UsersIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/groups/edit/$groupId': {
      id: '/groups/edit/$groupId';
      path: '/groups/edit/$groupId';
      fullPath: '/groups/edit/$groupId';
      preLoaderRoute: typeof GroupsEditGroupIdLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/posts/edit/$postId': {
      id: '/posts/edit/$postId';
      path: '/posts/edit/$postId';
      fullPath: '/posts/edit/$postId';
      preLoaderRoute: typeof PostsEditPostIdLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/groups/create/': {
      id: '/groups/create/';
      path: '/groups/create';
      fullPath: '/groups/create';
      preLoaderRoute: typeof GroupsCreateIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/posts/create/': {
      id: '/posts/create/';
      path: '/posts/create';
      fullPath: '/posts/create';
      preLoaderRoute: typeof PostsCreateIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/profile/edit/': {
      id: '/profile/edit/';
      path: '/profile/edit';
      fullPath: '/profile/edit';
      preLoaderRoute: typeof ProfileEditIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/signin': typeof signSigninLazyRoute;
  '/signup': typeof signSignupLazyRoute;
  '/groups/$groupId': typeof GroupsGroupIdLazyRoute;
  '/posts/$postId': typeof PostsPostIdLazyRoute;
  '/users/$userId': typeof UsersUserIdLazyRoute;
  '/posts': typeof PostsIndexLazyRoute;
  '/profile': typeof ProfileIndexLazyRoute;
  '/users': typeof UsersIndexLazyRoute;
  '/groups/edit/$groupId': typeof GroupsEditGroupIdLazyRoute;
  '/posts/edit/$postId': typeof PostsEditPostIdLazyRoute;
  '/groups/create': typeof GroupsCreateIndexLazyRoute;
  '/posts/create': typeof PostsCreateIndexLazyRoute;
  '/profile/edit': typeof ProfileEditIndexLazyRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/signin': typeof signSigninLazyRoute;
  '/signup': typeof signSignupLazyRoute;
  '/groups/$groupId': typeof GroupsGroupIdLazyRoute;
  '/posts/$postId': typeof PostsPostIdLazyRoute;
  '/users/$userId': typeof UsersUserIdLazyRoute;
  '/posts': typeof PostsIndexLazyRoute;
  '/profile': typeof ProfileIndexLazyRoute;
  '/users': typeof UsersIndexLazyRoute;
  '/groups/edit/$groupId': typeof GroupsEditGroupIdLazyRoute;
  '/posts/edit/$postId': typeof PostsEditPostIdLazyRoute;
  '/groups/create': typeof GroupsCreateIndexLazyRoute;
  '/posts/create': typeof PostsCreateIndexLazyRoute;
  '/profile/edit': typeof ProfileEditIndexLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/(sign)/signin': typeof signSigninLazyRoute;
  '/(sign)/signup': typeof signSignupLazyRoute;
  '/groups/$groupId': typeof GroupsGroupIdLazyRoute;
  '/posts/$postId': typeof PostsPostIdLazyRoute;
  '/users/$userId': typeof UsersUserIdLazyRoute;
  '/posts/': typeof PostsIndexLazyRoute;
  '/profile/': typeof ProfileIndexLazyRoute;
  '/users/': typeof UsersIndexLazyRoute;
  '/groups/edit/$groupId': typeof GroupsEditGroupIdLazyRoute;
  '/posts/edit/$postId': typeof PostsEditPostIdLazyRoute;
  '/groups/create/': typeof GroupsCreateIndexLazyRoute;
  '/posts/create/': typeof PostsCreateIndexLazyRoute;
  '/profile/edit/': typeof ProfileEditIndexLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/signin'
    | '/signup'
    | '/groups/$groupId'
    | '/posts/$postId'
    | '/users/$userId'
    | '/posts'
    | '/profile'
    | '/users'
    | '/groups/edit/$groupId'
    | '/posts/edit/$postId'
    | '/groups/create'
    | '/posts/create'
    | '/profile/edit';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/signin'
    | '/signup'
    | '/groups/$groupId'
    | '/posts/$postId'
    | '/users/$userId'
    | '/posts'
    | '/profile'
    | '/users'
    | '/groups/edit/$groupId'
    | '/posts/edit/$postId'
    | '/groups/create'
    | '/posts/create'
    | '/profile/edit';
  id:
    | '__root__'
    | '/'
    | '/(sign)/signin'
    | '/(sign)/signup'
    | '/groups/$groupId'
    | '/posts/$postId'
    | '/users/$userId'
    | '/posts/'
    | '/profile/'
    | '/users/'
    | '/groups/edit/$groupId'
    | '/posts/edit/$postId'
    | '/groups/create/'
    | '/posts/create/'
    | '/profile/edit/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  signSigninLazyRoute: typeof signSigninLazyRoute;
  signSignupLazyRoute: typeof signSignupLazyRoute;
  GroupsGroupIdLazyRoute: typeof GroupsGroupIdLazyRoute;
  PostsPostIdLazyRoute: typeof PostsPostIdLazyRoute;
  UsersUserIdLazyRoute: typeof UsersUserIdLazyRoute;
  PostsIndexLazyRoute: typeof PostsIndexLazyRoute;
  ProfileIndexLazyRoute: typeof ProfileIndexLazyRoute;
  UsersIndexLazyRoute: typeof UsersIndexLazyRoute;
  GroupsEditGroupIdLazyRoute: typeof GroupsEditGroupIdLazyRoute;
  PostsEditPostIdLazyRoute: typeof PostsEditPostIdLazyRoute;
  GroupsCreateIndexLazyRoute: typeof GroupsCreateIndexLazyRoute;
  PostsCreateIndexLazyRoute: typeof PostsCreateIndexLazyRoute;
  ProfileEditIndexLazyRoute: typeof ProfileEditIndexLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  signSigninLazyRoute: signSigninLazyRoute,
  signSignupLazyRoute: signSignupLazyRoute,
  GroupsGroupIdLazyRoute: GroupsGroupIdLazyRoute,
  PostsPostIdLazyRoute: PostsPostIdLazyRoute,
  UsersUserIdLazyRoute: UsersUserIdLazyRoute,
  PostsIndexLazyRoute: PostsIndexLazyRoute,
  ProfileIndexLazyRoute: ProfileIndexLazyRoute,
  UsersIndexLazyRoute: UsersIndexLazyRoute,
  GroupsEditGroupIdLazyRoute: GroupsEditGroupIdLazyRoute,
  PostsEditPostIdLazyRoute: PostsEditPostIdLazyRoute,
  GroupsCreateIndexLazyRoute: GroupsCreateIndexLazyRoute,
  PostsCreateIndexLazyRoute: PostsCreateIndexLazyRoute,
  ProfileEditIndexLazyRoute: ProfileEditIndexLazyRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(sign)/signin",
        "/(sign)/signup",
        "/groups/$groupId",
        "/posts/$postId",
        "/users/$userId",
        "/posts/",
        "/profile/",
        "/users/",
        "/groups/edit/$groupId",
        "/posts/edit/$postId",
        "/groups/create/",
        "/posts/create/",
        "/profile/edit/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(sign)/signin": {
      "filePath": "(sign)/signin.lazy.tsx"
    },
    "/(sign)/signup": {
      "filePath": "(sign)/signup.lazy.tsx"
    },
    "/groups/$groupId": {
      "filePath": "groups/$groupId.lazy.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts/$postId.lazy.tsx"
    },
    "/users/$userId": {
      "filePath": "users/$userId.lazy.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.lazy.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.lazy.tsx"
    },
    "/users/": {
      "filePath": "users/index.lazy.tsx"
    },
    "/groups/edit/$groupId": {
      "filePath": "groups/edit/$groupId.lazy.tsx"
    },
    "/posts/edit/$postId": {
      "filePath": "posts/edit/$postId.lazy.tsx"
    },
    "/groups/create/": {
      "filePath": "groups/create/index.lazy.tsx"
    },
    "/posts/create/": {
      "filePath": "posts/create/index.lazy.tsx"
    },
    "/profile/edit/": {
      "filePath": "profile/edit/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
