/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const UsersIndexLazyImport = createFileRoute('/users/')()
const ProfileIndexLazyImport = createFileRoute('/profile/')()
const PostsIndexLazyImport = createFileRoute('/posts/')()
const UsersUserIdLazyImport = createFileRoute('/users/$userId')()
const PostsPostIdLazyImport = createFileRoute('/posts/$postId')()
const signSignupLazyImport = createFileRoute('/(sign)/signup')()
const signSigninLazyImport = createFileRoute('/(sign)/signin')()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexLazyRoute = UsersIndexLazyImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/users/index.lazy').then((d) => d.Route))

const ProfileIndexLazyRoute = ProfileIndexLazyImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile/index.lazy').then((d) => d.Route))

const PostsIndexLazyRoute = PostsIndexLazyImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/posts/index.lazy').then((d) => d.Route))

const UsersUserIdLazyRoute = UsersUserIdLazyImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/users/$userId.lazy').then((d) => d.Route))

const PostsPostIdLazyRoute = PostsPostIdLazyImport.update({
  id: '/posts/$postId',
  path: '/posts/$postId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/posts/$postId.lazy').then((d) => d.Route))

const signSignupLazyRoute = signSignupLazyImport
  .update({
    id: '/(sign)/signup',
    path: '/signup',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(sign)/signup.lazy').then((d) => d.Route))

const signSigninLazyRoute = signSigninLazyImport
  .update({
    id: '/(sign)/signin',
    path: '/signin',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(sign)/signin.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(sign)/signin': {
      id: '/(sign)/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof signSigninLazyImport
      parentRoute: typeof rootRoute
    }
    '/(sign)/signup': {
      id: '/(sign)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof signSignupLazyImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/signin': typeof signSigninLazyRoute
  '/signup': typeof signSignupLazyRoute
  '/posts/$postId': typeof PostsPostIdLazyRoute
  '/users/$userId': typeof UsersUserIdLazyRoute
  '/posts': typeof PostsIndexLazyRoute
  '/profile': typeof ProfileIndexLazyRoute
  '/users': typeof UsersIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/signin': typeof signSigninLazyRoute
  '/signup': typeof signSignupLazyRoute
  '/posts/$postId': typeof PostsPostIdLazyRoute
  '/users/$userId': typeof UsersUserIdLazyRoute
  '/posts': typeof PostsIndexLazyRoute
  '/profile': typeof ProfileIndexLazyRoute
  '/users': typeof UsersIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(sign)/signin': typeof signSigninLazyRoute
  '/(sign)/signup': typeof signSignupLazyRoute
  '/posts/$postId': typeof PostsPostIdLazyRoute
  '/users/$userId': typeof UsersUserIdLazyRoute
  '/posts/': typeof PostsIndexLazyRoute
  '/profile/': typeof ProfileIndexLazyRoute
  '/users/': typeof UsersIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/signin'
    | '/signup'
    | '/posts/$postId'
    | '/users/$userId'
    | '/posts'
    | '/profile'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/signin'
    | '/signup'
    | '/posts/$postId'
    | '/users/$userId'
    | '/posts'
    | '/profile'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/(sign)/signin'
    | '/(sign)/signup'
    | '/posts/$postId'
    | '/users/$userId'
    | '/posts/'
    | '/profile/'
    | '/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  signSigninLazyRoute: typeof signSigninLazyRoute
  signSignupLazyRoute: typeof signSignupLazyRoute
  PostsPostIdLazyRoute: typeof PostsPostIdLazyRoute
  UsersUserIdLazyRoute: typeof UsersUserIdLazyRoute
  PostsIndexLazyRoute: typeof PostsIndexLazyRoute
  ProfileIndexLazyRoute: typeof ProfileIndexLazyRoute
  UsersIndexLazyRoute: typeof UsersIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  signSigninLazyRoute: signSigninLazyRoute,
  signSignupLazyRoute: signSignupLazyRoute,
  PostsPostIdLazyRoute: PostsPostIdLazyRoute,
  UsersUserIdLazyRoute: UsersUserIdLazyRoute,
  PostsIndexLazyRoute: PostsIndexLazyRoute,
  ProfileIndexLazyRoute: ProfileIndexLazyRoute,
  UsersIndexLazyRoute: UsersIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(sign)/signin",
        "/(sign)/signup",
        "/posts/$postId",
        "/users/$userId",
        "/posts/",
        "/profile/",
        "/users/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(sign)/signin": {
      "filePath": "(sign)/signin.lazy.tsx"
    },
    "/(sign)/signup": {
      "filePath": "(sign)/signup.lazy.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts/$postId.lazy.tsx"
    },
    "/users/$userId": {
      "filePath": "users/$userId.lazy.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.lazy.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.lazy.tsx"
    },
    "/users/": {
      "filePath": "users/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
